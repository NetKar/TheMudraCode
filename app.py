{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1eCSPrZDLdW32u3hvc93sifVbrzkN-_5B","timestamp":1757781144910}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import os\n","import cv2\n","import numpy as np\n","import mediapipe as mp\n","import base64\n","from io import BytesIO\n","from flask import Flask, request, jsonify\n","from flask_cors import CORS\n","import tf_keras as k3\n","\n","#must install dependencies on deployment server\n","\n","#relative paths\n","modelPath = './mp_hand_gesture'\n","namesPath = os.path.join(modelPath, 'gesture.names')\n","\n","#initialize flask\n","app = Flask(__name__)\n","\n","CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n","\n","try:\n","    #initialize MediaPipe\n","    mpHands = mp.solutions.hands\n","    hands = mpHands.Hands(max_num_hands=1, min_detection_confidence=0.7)\n","\n","    #load model\n","    model = k3.models.load_model(modelPath)\n","\n","    #load class names\n","    with open(namesPath, 'r') as f:\n","        classNames = f.read().split('\\n')\n","\n","    #flag: successful initialization and loading\n","    initLoaded = True\n","\n","except Exception as e:\n","    print(f\"Error loading resources: {e}\")\n","    initLoaded = False\n","\n","#mudra details\n","\n","def get_mudra_details(className):\n","    details = {\n","        \"name\": \"Mudra not mapped yet\",\n","        \"shloka\": \"Not mapped yet\",\n","        \"meaning\": \"Not mapped yet\"\n","    }\n","\n","    if className in [\"thumbs up\", \"thumbs down\"]:\n","        details[\"name\"] = \"Shikhara\"\n","        details[\"shloka\"] = (\n","            \"Madana kamuka sthambaecha Nishcaya pitrukarmani\\n\"\n","            \"Oshtra pravishtaroopani Radhana prashnabhavanae\\n\"\n","            \"Linga nastheethivachanae Samarana katibandakarshana\\n\"\n","            \"Parirambhavidikrama Gandani nada Shikarayujyatahe Bharatadibi\"\n","        )\n","        details[\"meaning\"] = (\n","            \"God of love, a Bow, a Pillar, To decide, Making offering to Manes,\\n\"\n","            \"Lips, To Enter or to pour, Tooth, Questioning,\\n\"\n","            \"Shiva Lingam, Saying 'I donâ€™t know', An act of remembering, To act, To tie around the waist,\\n\"\n","            \"To embrace, Ringing of bells, Peak\"\n","        )\n","    elif className == \"fist\":\n","        details[\"name\"] = \"Mushti\"\n","    elif className in [\"stop\", \"live long\"]:\n","        details[\"name\"] = \"Patakam\"\n","\n","    return details\n","\n","#API endpoint\n","\n","@app.route('/recognize_gesture', methods=['POST'])\n","def recognize_gesture():\n","    \"\"\"Receives Base64 image, recognizes gesture, and returns Mudra details.\"\"\"\n","    if not initLoaded:\n","        return jsonify({\"error\": \"Server failed to initialize and load resources.\"}), 503\n","\n","    #receive and validate data from client side (Weebly JavaScript)\n","    try:\n","        data = request.get_json()\n","        if not data or 'image_data' not in data:\n","            return jsonify({\"error\": \"No image data provided in the request payload.\"}), 400\n","\n","        image_b64 = data['image_data']\n","        #to remove \"data:image/jpeg;base64,\" prefix, if exists\n","        if ',' in image_b64:\n","            image_b64 = image_b64.split(',')[1]\n","\n","    except Exception as e:\n","        return jsonify({\"error\": f\"Invalid JSON or request format: {e}\"}), 400\n","\n","    #base64 Image to OpenCV/NumPy array\n","    try:\n","        image_bytes = base64.b64decode(image_b64)\n","        image_np = np.frombuffer(image_bytes, dtype=np.uint8)\n","        frame = cv2.imdecode(image_np, cv2.IMREAD_COLOR)\n","\n","        #if image decoded properly\n","        if frame is None:\n","            return jsonify({\"error\": \"Could not decode image data.\"}), 400\n","\n","    except Exception as e:\n","        return jsonify({\"error\": f\"Error in decoding image: {e}\"}), 500\n","\n","    #gesture recognition logic (of OG GC code)\n","\n","    x, y, c = frame.shape\n","    framergb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n","    result = hands.process(framergb)\n","    className = 'No Hand Detected' #default\n","\n","    if result.multi_hand_landmarks:\n","        landmarks = []\n","        for handslms in result.multi_hand_landmarks:\n","            for lm in handslms.landmark:\n","                lmx = int(lm.x * x)\n","                lmy = int(lm.y * y)\n","                landmarks.append([lmx, lmy])\n","\n","            #predict gesture using first detected hand\n","            prediction = model.predict([landmarks], verbose=0)\n","            classID = np.argmax(prediction)\n","            className = classNames[classID]\n","            break\n","\n","    #fetch mudra details\n","    mudra_details = get_mudra_details(className)\n","\n","    #return JSON\n","    return jsonify({\n","        \"status\": \"success\",\n","        \"gesture_name\": className,\n","        \"mudra_name\": mudra_details['name'],\n","        \"viniyoga_sloka\": mudra_details['sloka'],\n","        \"meaning\": mudra_details['meaning']\n","    })\n","\n","#local testing\n","\n","if __name__ == '__main__':\n","    # NOTE: When deploying to Heroku/Cloud Run, you typically use a production WSGI server\n","    # like Gunicorn, which calls 'app'. You won't use app.run() directly for production.\n","    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))"],"metadata":{"id":"CdTEx_vHbVXz","executionInfo":{"status":"ok","timestamp":1760453771171,"user_tz":-330,"elapsed":60246,"user":{"displayName":"Netra Karthigeyan","userId":"11758651816305236089"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"49050944-8707-4269-d6bc-79331deba01d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error loading resources: No file or directory found at ./mp_hand_gesture\n"," * Serving Flask app '__main__'\n"," * Debug mode: on\n"]},{"output_type":"stream","name":"stderr","text":["INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n"," * Running on all addresses (0.0.0.0)\n"," * Running on http://127.0.0.1:5000\n"," * Running on http://172.28.0.12:5000\n","INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n","INFO:werkzeug: * Restarting with watchdog (inotify)\n"]}]}]}